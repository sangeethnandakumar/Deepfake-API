name: Deploy AI Model to Azure Container Apps

on:
  push:
    branches: [ "main", "master" ]
  workflow_dispatch:

env:
  # Registry Configuration
  REGISTRY: ghcr.io
  REGISTRY_URL: https://ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/deepfake-api

  # Azure Configuration
  RESOURCE_GROUP: fastgst.in
  ACA_NAME: deepfake-api
  ACA_ENV: env-deepfake
  ACA_LOCATION: centralindia

  # Container Configuration
  TARGET_PORT: 8080
  CPU: 0.25
  MEMORY: 0.5Gi
  MIN_REPLICAS: 0
  MAX_REPLICAS: 2

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Generate Unique Image Tag
        run: echo "IMAGE_TAG=$(date +'%M%S_%p_%d_%m_%Y')" >> $GITHUB_ENV

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_URL }}
          username: ${{ github.actor }}
          password: ${{ secrets.GH_PAT_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

      - name: Set output
        id: output-image-details
        run: echo "image_tag=${{ env.IMAGE_TAG }}" >> $GITHUB_OUTPUT

    outputs:
      image_tag: ${{ steps.output-image-details.outputs.image_tag }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Ensure Resource Group exists
        run: |
          RG=$(az group show -n ${{ env.RESOURCE_GROUP }} --query name -o tsv || echo "")
          if [ -z "$RG" ]; then
            az group create -n ${{ env.RESOURCE_GROUP }} -l ${{ env.ACA_LOCATION }}
          fi

      - name: Ensure Container App Environment exists
        run: |
          ENV_ID=$(az containerapp env show -g ${{ env.RESOURCE_GROUP }} -n ${{ env.ACA_ENV }} --query id -o tsv || echo "")
          if [ -z "$ENV_ID" ]; then
            az containerapp env create \
              -g ${{ env.RESOURCE_GROUP }} \
              -n ${{ env.ACA_ENV }} \
              --location ${{ env.ACA_LOCATION }} \
              --logs-destination none
          fi
          ENV_ID=$(az containerapp env show -g ${{ env.RESOURCE_GROUP }} -n ${{ env.ACA_ENV }} --query id -o tsv)
          echo "ENV_ID=$ENV_ID" >> $GITHUB_ENV

      - name: Check if Container App exists and create/update accordingly
        run: |
          EXISTS=$(az containerapp show -g ${{ env.RESOURCE_GROUP }} -n ${{ env.ACA_NAME }} --query id -o tsv 2>/dev/null || echo "")
          if [ -z "$EXISTS" ]; then
            az containerapp create \
              -g ${{ env.RESOURCE_GROUP }} \
              -n ${{ env.ACA_NAME }} \
              --environment ${{ env.ACA_ENV }} \
              --image ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build.outputs.image_tag }} \
              --registry-server ${{ env.REGISTRY }} \
              --registry-username ${{ github.actor }} \
              --registry-password ${{ secrets.GH_PAT_TOKEN }} \
              --target-port ${{ env.TARGET_PORT }} \
              --ingress external \
              --cpu ${{ env.CPU }} \
              --memory ${{ env.MEMORY }} \
              --min-replicas ${{ env.MIN_REPLICAS }} \
              --max-replicas ${{ env.MAX_REPLICAS }}
            echo "CONTAINER_APP_CREATED=true" >> $GITHUB_ENV
          else
            echo "CONTAINER_APP_CREATED=false" >> $GITHUB_ENV

      - name: Deploy/Update Azure Container Apps
        if: env.CONTAINER_APP_CREATED == 'false'
        uses: Azure/container-apps-deploy-action@v2
        with:
          containerAppName: ${{ env.ACA_NAME }}
          resourceGroup: ${{ env.RESOURCE_GROUP }}
          containerAppEnvironment: ${{ env.ACA_ENV }}
          registryUrl: ${{ env.REGISTRY }}
          registryUsername: ${{ github.actor }}
          registryPassword: ${{ secrets.GH_PAT_TOKEN }}
          imageToDeploy: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build.outputs.image_tag }}
